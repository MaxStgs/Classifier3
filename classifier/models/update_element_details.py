# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from classifier.models.base_model_ import Model
from classifier import util


class UpdateElementDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, element_name: str=None, is_root: bool=None, parent_element_id: int=None, is_end: bool=None, is_indexed: bool=None):  # noqa: E501
        """UpdateElementDetails - a model defined in Swagger

        :param id: The id of this UpdateElementDetails.  # noqa: E501
        :type id: int
        :param element_name: The element_name of this UpdateElementDetails.  # noqa: E501
        :type element_name: str
        :param is_root: The is_root of this UpdateElementDetails.  # noqa: E501
        :type is_root: bool
        :param parent_element_id: The parent_element_id of this UpdateElementDetails.  # noqa: E501
        :type parent_element_id: int
        :param is_end: The is_end of this UpdateElementDetails.  # noqa: E501
        :type is_end: bool
        :param is_indexed: The is_indexed of this UpdateElementDetails.  # noqa: E501
        :type is_indexed: bool
        """
        self.swagger_types = {
            'id': int,
            'element_name': str,
            'is_root': bool,
            'parent_element_id': int,
            'is_end': bool,
            'is_indexed': bool
        }

        self.attribute_map = {
            'id': 'id',
            'element_name': 'elementName',
            'is_root': 'isRoot',
            'parent_element_id': 'parentElementId',
            'is_end': 'isEnd',
            'is_indexed': 'isIndexed'
        }

        self._id = id
        self._element_name = element_name
        self._is_root = is_root
        self._parent_element_id = parent_element_id
        self._is_end = is_end
        self._is_indexed = is_indexed

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateElementDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateElementDetails of this UpdateElementDetails.  # noqa: E501
        :rtype: UpdateElementDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this UpdateElementDetails.

        id  # noqa: E501

        :return: The id of this UpdateElementDetails.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this UpdateElementDetails.

        id  # noqa: E501

        :param id: The id of this UpdateElementDetails.
        :type id: int
        """

        self._id = id

    @property
    def element_name(self) -> str:
        """Gets the element_name of this UpdateElementDetails.

        it is his name  # noqa: E501

        :return: The element_name of this UpdateElementDetails.
        :rtype: str
        """
        return self._element_name

    @element_name.setter
    def element_name(self, element_name: str):
        """Sets the element_name of this UpdateElementDetails.

        it is his name  # noqa: E501

        :param element_name: The element_name of this UpdateElementDetails.
        :type element_name: str
        """

        self._element_name = element_name

    @property
    def is_root(self) -> bool:
        """Gets the is_root of this UpdateElementDetails.

        Is root?  # noqa: E501

        :return: The is_root of this UpdateElementDetails.
        :rtype: bool
        """
        return self._is_root

    @is_root.setter
    def is_root(self, is_root: bool):
        """Sets the is_root of this UpdateElementDetails.

        Is root?  # noqa: E501

        :param is_root: The is_root of this UpdateElementDetails.
        :type is_root: bool
        """

        self._is_root = is_root

    @property
    def parent_element_id(self) -> int:
        """Gets the parent_element_id of this UpdateElementDetails.


        :return: The parent_element_id of this UpdateElementDetails.
        :rtype: int
        """
        return self._parent_element_id

    @parent_element_id.setter
    def parent_element_id(self, parent_element_id: int):
        """Sets the parent_element_id of this UpdateElementDetails.


        :param parent_element_id: The parent_element_id of this UpdateElementDetails.
        :type parent_element_id: int
        """

        self._parent_element_id = parent_element_id

    @property
    def is_end(self) -> bool:
        """Gets the is_end of this UpdateElementDetails.

        Is end element?  # noqa: E501

        :return: The is_end of this UpdateElementDetails.
        :rtype: bool
        """
        return self._is_end

    @is_end.setter
    def is_end(self, is_end: bool):
        """Sets the is_end of this UpdateElementDetails.

        Is end element?  # noqa: E501

        :param is_end: The is_end of this UpdateElementDetails.
        :type is_end: bool
        """

        self._is_end = is_end

    @property
    def is_indexed(self) -> bool:
        """Gets the is_indexed of this UpdateElementDetails.

        Can this field be indexed?  # noqa: E501

        :return: The is_indexed of this UpdateElementDetails.
        :rtype: bool
        """
        return self._is_indexed

    @is_indexed.setter
    def is_indexed(self, is_indexed: bool):
        """Sets the is_indexed of this UpdateElementDetails.

        Can this field be indexed?  # noqa: E501

        :param is_indexed: The is_indexed of this UpdateElementDetails.
        :type is_indexed: bool
        """

        self._is_indexed = is_indexed
